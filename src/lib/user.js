import { GraphQLClient, gql } from "graphql-request";

const API_HYGRAPH_ENDPOINT = "https://api-ca-central-1.hygraph.com/v2/clzfsx1u7048507w6g9cyf3vx/master";

export const fetchUserCount = async () => {
  const graphQLClient = new GraphQLClient(API_HYGRAPH_ENDPOINT, {
    headers: {
      "Content-Type": 'application/json',
    },
  });

    const query = gql`
    query MyQuery {
      userEnrollCourses {
        userId
      }
    }
  `;

  try {
    const data = await graphQLClient.request(query);
    const userCount = data.userEnrollCourses.length;
    console.log(`Total users enrolled: ${userCount}`);
    return userCount;
  } catch (error) {
    console.error('Failed to fetch user enrollments: ', error);
    return null;
  }
};

export const fetchUserById = async (id) => {
    const graphQLClient = new GraphQLClient(API_HYGRAPH_ENDPOINT, {
      headers: {
        "Content-Type": 'application/json',
      },
    });
  
    const query = gql`
        query MyQuery($userId: Int!) {
            userEnrollCourses(where: {userId: $userId}) {
                userId
                completedWeeks {
                ... on CompletedWeeks {
                    weekId
                    chapterComplete {
                    ... on ChapterComp {
                        complete
                        idOfChapter
                    }
                    }
                }
                }
            }
        }
    `;

    const varaibles = { userId: id}

    try {
      const data = await graphQLClient.request(query, varaibles);
      //const userCount = data.userEnrollCourses.length;
      console.log(`user founded: ${data}`);
      return data;
    } catch (error) {
      console.error('Failed to fetch user enrollments: ', error);
      return null;
    }
  };
  

export const checkUserByEmail = async (email) => {
    const endpoint = API_HYGRAPH_ENDPOINT;
  
    const graphQLClient = new GraphQLClient(endpoint, {
      headers: {
        "Content-Type": 'application/json',
      },
    });
  
    const query = gql`
      query FetchUserByEmail($email: String!) {
        userEnrollCourses(where: { userEmail: $email }) {
          userId
          
        }
      }
    `;
  
    try {
      const data = await graphQLClient.request(query, { email });
      return data.userEnrollCourses.length > 0 ? data.userEnrollCourses[0] : null;
    } catch (error) {
      console.error('Failed to fetch user:', error);
      return null;
    }
  };
  
  export const fetchUserByEmail = async (email) => {
    const endpoint = API_HYGRAPH_ENDPOINT;
  
    const graphQLClient = new GraphQLClient(endpoint, {
      headers: {
        "Content-Type": 'application/json',
      },
    });
  
    const query = gql`
      query FetchUserByEmail($email: String!) {
        userEnrollCourses(where: { userEmail: $email }) {
          id
          userId
          completedWeeks {
            ... on CompletedWeeks {
              id
              weekId
              chapterComplete {
                ... on ChapterComp {
                  id
                  idOfChapter
                  complete
                }
              }
            }
          }
        }
      }
    `;
  
    try {
      const data = await graphQLClient.request(query, { email });
      
      return data.userEnrollCourses.length > 0 ? data.userEnrollCourses[0] : null;
    } catch (error) {
      console.error('Failed to fetch user:', error);
      return null;
    }
  };
  

//all this id now is generated By Hygraph


export const UpdateChapter = async (userId, weekId, chapId, statu) => {
    const endpoint = API_HYGRAPH_ENDPOINT;

    const graphQLClient = new GraphQLClient(endpoint, {
        headers: {
            "Content-Type": 'application/json',
        },
    });

    const query = gql`
        mutation UpdatedCompleteChapter($userId: ID!, $weekId: ID!, $chapId: ID!, $statu: Boolean!) {
            updateUserEnrollCourse(
                data: { 
                    completedWeeks: { 
                        update: { 
                            CompletedWeeks: { 
                                where: { id: $weekId }, 
                                data: { 
                                    chapterComplete: { 
                                        update: { 
                                            ChapterComp: { 
                                                where: { id: $chapId }, 
                                                data: { complete: $statu } 
                                            } 
                                        } 
                                    } 
                                } 
                            } 
                        } 
                    } 
                }, 
                where: { id: $userId }
            ) {
                id
            }
            publishUserEnrollCourse(where: { id: $userId }) {
                id
            }
        }
    `;

    const variables = { userId: userId, weekId: weekId, chapId: chapId, statu: statu };

    try {
        const data = await graphQLClient.request(query, variables);
        console.log('userId: ', userId); 
        console.log('weekId: ', weekId);
        console.log('chapId: ', chapId); 
        console.log('status: ', statu); 

        return data.updateUserEnrollCourse.id;
    } catch (error) {
        console.error('Update Failed ', error);
        return null;
    }
}
